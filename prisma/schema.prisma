// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  name            String?
  username        String?         @unique
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  preferredCrypto String? // Preferred cryptocurrency for payments
  walletAddresses Json? // JSON object to store multiple wallet addresses
  accounts        Account[]
  sessions        Session[]
  campaigns       Campaign[]
  contributions   Contribution[]
  paymentIntents  PaymentIntent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// CryptoStarter Models
model Campaign {
  id                 String   @id @default(cuid())
  title              String
  shortDescription   String
  description        String
  fundingGoal        Float
  currentAmount      Float    @default(0)
  deadline           DateTime
  category           String
  mainImage          String?
  additionalMedia    Media[]
  website            String?
  socials            Social[]
  walletAddress      String
  cryptocurrencyType String // The cryptocurrency requested by campaign creator
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  active             Boolean  @default(true)
  goalReached        Boolean  @default(false)
  fundsDistributed   Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  contributions Contribution[]
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String // image or video
  createdAt DateTime @default(now())

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Social {
  id        String   @id @default(cuid())
  platform  String
  url       String
  createdAt DateTime @default(now())

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Contribution {
  id                 String   @id @default(cuid())
  amount             Float // Amount in USD equivalent
  originalAmount     Float // Original amount in donated currency
  donationCurrency   String // Currency used for donation (ETH, BTC, SOL, etc.)
  transactionHash    String? // Hash of the transaction for reference
  donorWalletAddress String // Donor's wallet address for potential refunds
  message            String?
  anonymous          Boolean  @default(false)
  createdAt          DateTime @default(now())
  refunded           Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

// Transaction API Logs
model TransactionLog {
  id          String   @id @default(cuid())
  type        String // donation, refund, distribution
  amount      Float
  currency    String
  status      String // pending, completed, failed
  apiResponse String? // Raw response from cryptoprocessing.io
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contributionId String?
  campaignId     String?
}

// Payment Intents
model PaymentIntent {
  id                 String   @id @default(cuid())
  amount             Float
  currency           String
  description        String?
  walletAddress      String
  userId             String
  status             String
  paymentId          String   @unique
  apiResponse        String
  estimatedSolAmount Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
